<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="intro-version-control" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Version Control</title>
  <introduction>
    <p>
      Have you ever experienced seomething like this?
      <ul>
        <li>
          You create an important document.
        </li>
        <li>
          It is important, so you email it to some friends and family for feedback on it.
        </li>
        <li>
          You re-read it yourself create a new edited version.
        </li>
        <li>
          Then you get back feedback from someone you sent it to, but the feedback is on your original version.
        </li>
        <li>
          You then have to merge the two versions <em>by hand</em>.
        </li>
      </ul>
    </p>
  
`````<p>
    After doing a lot of merging of documents by hand, you might have a folder that looks like the following:

    <pre>
      mydoc.odt
      mydoc2.odt
      mydoc-moms-edits.odt
      mydoc2-plus-moms-combined.odt
    </pre>
    </p>
    <p>
      Or maybe you have experienced this onlyon a larger scale... for example, three of your friends comment on differnent versions because they share them with the whole group via email. Some comment on the original version, some comment on mom's version, others comment on your brother's verion, etc.
    </p>
    <p>
      If you have experienced this, you have used version control, which according to Wikipedia <url href="https://en.wikipedia.org/wiki/Version_control" visual="https://en.wikipedia.org/wiki/Version_control">version control</url> “is the management of changes to documents, programs, and other information stored as computer files.” But, you have also have come to deeply understand the need for a far easier way to merge in any changes that come on an earlier version.
    </p>

    <p>
      A system that manages version control for software development is called a <em>source code management system (SCM)</em>. In this chapter, you will learn the basic use of source control management.
    </p>

  </introduction>

  <subsection xml:id="subsec_version_control">
    <title>Version Control</title>

     	<p>
				The FOSS world has developed many excellent SCMs. 
			</p>

			<p>
				You may want to start your own project someday, and you will have to choose an SCM. Right now, though, you will be working with existing projects, which means the SCM has been chosen for you. The following five SCMs have been popular:
			</p>

			<p><ul>
				<li>
				<url href="http://subversion.apache.org" visual="subversion.apache.org">Subversion (svn)</url>
				</li>

				<li>
				<url href="http://bazaar.canonical.com/en/" visual="bazaar.canonical.com/en">Bazaar (bzr)</url>
				</li>

				<li>
				<url href="http://www.nongnu.org/cvs/" visual="www.nongnu.org/cvs">Concurrent Version System (cvs)</url>
				</li>

				<li>
				<url href="https://git-scm.com" visual="git-scm.com">Git (git)</url>
				</li>

				<li>
				<url href="https://www.mercurial-scm.org/" visual="www.mercurial-scm.org/">Mercurial (hg)</url>
				</li>

			</ul></p>


  </subsection>

    <conclusion>
    <p>
      What has happenened in the recent decade in version control systems has been truly remarkable because Git has come to completely dominate not just the open source world, but also much of the rest of the proprietary software community as well.
    </p>
    <p>
      For this reason, in the next chapter we will be exploring Git and a cloud hosting site called <url href="https://www.github.com/" visual="www.github.com/">>Github</url>.
    </p>
    </conclusion>





</section>

