<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_documentation_involvement" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Documentation as Involvement</title>
  <introduction>



  </introduction>

		<subsection xml:id="using-documentation-as-a-way-to-get-involved">
			<title>Using documentation as a way to get involved</title>
			<p>
				üîóTo contribute to an open source project ranges from being technically fairly easy to requiring a long series of steps including many interconnected software installations and several interconnected code bases.
			</p>

			<p>
				Documentation has a reputation as being an easy way to begin contributing to a project. Newcomers can often make improvements to the documentation for such things as how to get a thing to run/compile because they will be going through that process and might run into an issue or outdated part of documentation. They are then in a great position to improve it based on their experience.
			</p>

			<p>
				When developers resist documenting, it is usually around several themes:
			</p>

			<p><ol>

				<li>
				Writing is not a principal skill.
				</li>

				<li>
				Developers often don't like technical writing and want to get on with new engineering problems instead. In OSS, developers are volunteers and writing documentation takes up more of their free time.
				</li>
				<li>
				For commercial projects, priorities may be on releasing new features and there may be little to no time to write documentation as it is not viewed by management as valuable.
				</li>



			</ol></p>

			<p>
				The techniques for creating a successful community documentation project that attracts contributions from actual project developers are mirrored answers to these problems:
			</p>

			<p><ol>
				<li>
				Focus on making the tools aligned with the developer team‚Äôs preferred methods or built in to the workflow.
				</li>

				<li>
				Turn writing in to a¬†brain dump, that is, an outpouring of information without too much concern to writing standards (grammar, spelling, or structure).
				</li>

				<li>
				Enable non-developers to provide significant contributions by saving the developers from the actual work of writing, which is structuring and editing.
				</li>

			</ol></p>

			<p>
				Dumping down words in to a text editor is not very hard; many developers write copiously in email, for example. The documentor‚Äôs challenge is finding this content wherever it is (mailing lists,¬†IRC¬†discussions, random wiki pages) and editing it in to something comprehensive that reveals content holes for filling. The documentation project‚Äôs success hinges on the ability to restructure rambling content and make all of that accessible to new writing contributors, so they can begin meaningful work from the very start.
			</p>

			<p>
				A metric of this success is when any random experienced contributor is asked a question by a new contributor, and in answering, insists that the answer be documented, for example, on the project wiki using existing templates, etc. In this way new contributors are turned in to documentors who share the work burden from the existing contributors.
			</p>


			<exercise xml:id="exercise-getting-involved">
				<title>Exercise: Getting involved</title>

				<p>
          <ol>
            <li>
              <p>
                 Take a technical document content plan and prepare it to show to developers.
              </p>
           
            <ul>
              <li>
              For example, create a personal user namespace on an open source project‚Äôs wiki ‚ÄúUser:Username/New_page‚Äù.
              </li>

              <li>
              Alternately, prepare it for inclusion in email.
              </li>
				    </ul>
					</li>

					<li>
					Join the documentation mailing list; if there is no specific documentation list, join the main developer list.
					</li>

					<li>
					Send an email with your content plan and any work done so far, request comments on content and where you are getting information from.
					</li>

					<li>
					Proceed with writing a first draft of the content based on your plan and comments received.
					</li>

					<li>
					If you get stuck, return to the mailing list or ask on their preferred communication channel. Your earlier introduction and content plan makes this part easier.
					</li>

					<li>
					Return with your next draft to the mailing list, asking for a review and comments. Provide enough time, several days to a week, and be sure to engage in discussion about the content in a timely way (at least once per day.) The goal of this step is to improve the content‚Äôs accuracy.
					</li>

				</ol>
        </p>

			</exercise>
		</subsection>

</section>

