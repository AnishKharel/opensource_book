<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_git_getting_started">
	<title>Getting Started with Git</title>
	
<subsection xml:id="sec_git_types_version_control" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Types of Version Control</title>
  <introduction>
			<p>
	A <term>version control system (VCS)</term> records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this chapter, you will use software source code as the files being version controlled, although in reality you can do this with nearly any type of file on a computer.
			</p>

<p>
	For example, if you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a VCS is a very wise thing to use. It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
</p>
  </introduction>

<paragraphs xml:id="sec_local_version_control_systems">
	<title>Local Version Control Systems (VCS)</title>

	<p>
		Many people’s personal version-control method of choice is to copy files into another directory or up into the cloud. These approaches are common because they are simple, but they are also  error prone. It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to. 
	</p>


	<p>
		To deal with this issue, programmers long ago developed local version control systems (VCSs) that had a simple database that kept all the changes to files under revision control.
	</p>


				<figure xml:id="git-local">
					<image source='local.png'/> 
					<caption>Local Version Control</caption>
				</figure>

<!-- 				<p>
					One of the most popular VCS tools was a system called RCS, which is still distributed with many computers today. <url href="https://www.gnu.org/software/rcs/" visual="https://www.gnu.org/software/rcs/">RCS</url> works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.
				</p> -->
			</paragraphs>

			<paragraphs xml:id="sec_centralized_version_control_systems">
				<title>Centralized Version Control Systems</title>


				<p>
					The next major issue that people encounter is that they need to collaborate with developers on other systems. To deal with this problem, centralized version control systems (CVCSs) were developed. These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. For many years, this was the standard for version control.
				</p>

				<figure xml:id="git_centralized">
					<caption>Centralized Version Control</caption>
					<image source='centralized.png'/>

				</figure>

				<p>
					This centralized setup offers many advantages, especially over local VCSs. For example, everyone knows to a certain degree what everyone else on the project is doing. Administrators have fine-grained control over who can do what, and it’s far easier to administer a CVCS than it is to deal with local databases on every client.
				</p>

				<p>
					However, this setup also has some serious downsides. The most obvious is the single point of failure that the centralized server represents. If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they’re working on. If the disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything — the entire history of the project except whatever single snapshots people happen to have on their local machines. Local VCSs suffer from this same problem — whenever you have the entire history of the project in a single place, you risk losing everything.
				</p>


			</paragraphs>

			<paragraphs xml:id="sec_distributed_version_control_systems">
				<title>Distributed Version Control Systems</title>

				<p>
					This is where distributed version control systems (DVCS) step in. In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history. Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data.
				</p>


				<figure xml:id="git-distributed">
				<caption>Distributed Version Control</caption>	
					<image source='distributed.png'/>

				</figure>

				<p>
					Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project. This allows you to set up several types of workflows that aren’t possible in centralized systems, such as hierarchical models.
				</p>

		</paragraphs>
	</subsection>


	<subsection xml:id="_a_short_history_of_git">
			<title>A Short History of Git</title>

<!-- div attr= class="paragraph"-->
			<p>
				As with many great things in life, Git began with a bit of creative destruction and fiery controversy.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				The bridge of communication in a Linux system between the user applications and the underlying hardware is called the Linux kernel, and it is an open source software project of fairly large scope. 
				During the early years of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files. In 2002, the Linux kernel project began using a proprietary DVCS called BitKeeper.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked. This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows:
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="ulist"-->
			<p><ul>
				<li>
							<p>
				Speed
			</p>
				</li>

				<li>
							<p>
				Simple design
			</p>
				</li>

				<li>
							<p>
				Strong support for non-linear development (supports new/separate versions called branches that do not conflict with one another during development)
			</p>
				</li>

				<li>
							<p>
				Fully distributed
			</p>
				</li>

				<li>
							<p>
				Able to handle large projects like the Linux kernel efficiently (speed and data size)
			</p>
				</li>

			</ul></p><!--</div attr= class="ulist">-->

<!-- div attr= class="paragraph"-->
			<p>
				Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It’s amazingly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development 
				<!-- TODO(See <xref="sec_git_branching"> Git Branching</xref>).-->
			</p><!--</div attr= class="paragraph">-->

	</subsection>

	<subsection xml:id="sec-what-is-git">
		<title>What is Git?</title>

<!-- div attr=-->

		<introduction>
	


<!-- div attr= class="paragraph"-->
			<p>
				So, what is Git in a nutshell? This is an important topic to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you. 
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="sect3"-->
		</introduction>

			<paragraphs xml:id="sec_snapshots_not_differences">
				<title>Snapshots, Not Differences</title>

<!-- div attr= class="paragraph"-->
				<p>
					The major difference between Git and most other VCSs is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These other systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they store as a set of files and the changes made to each file over time (This is commonly described as <em>delta-based</em> version control).
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="imageblock"-->
<!-- div attr= class="content"-->
				<figure xml:id="git-deltas">
					<caption>Storing data as changes to a base version of each file</caption>

				<image source='deltas.png'/><!--</div attr= class="content">-->
				</figure>

				<p>
					Git doesn’t think of or store its data this way. Instead, Git thinks of its data more like a series of snapshots of a miniature filesystem. With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a <term>stream of snapshots</term>.
				</p><!--</div attr= class="paragraph">-->



				<figure xml:id="git-snapshots">
					<caption>Storing data as snapshots of the project over time</caption>

				<image source='snapshots.png'/><!--</div attr= class="content">-->
				</figure>

				<p>
					This is an important distinction between Git and nearly all other VCSs. It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation. This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS. We’ll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in <!--TODO-->Git Branching.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="sec_nearly_every_operation_is_local">
				<title>Nearly Every Operation Is Local</title>

<!-- div attr= class="paragraph"-->
				<p>
					Most operations in Git need only local files and resources to operate — generally no information is needed from another computer on your network. Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you — it simply reads it directly from your local database. This means you see the project history almost instantly. If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					This also means that there is very little you can’t do if you’re offline or off VPN. If you get on an airplane or a train and want to do a little work, you can commit happily (to your <em>local</em> copy, remember?) until you get to a network connection to upload. If you go home and can’t get your VPN client working properly, you can still work. In many other systems, doing so is either impossible or painful. In Perforce, for example, you can’t do much when you aren’t connected to the server; in Subversion and CVS, you can edit files, but you can’t commit changes to your database (because your database is offline). This may not seem like a huge deal, but you may be surprised what a big difference it can make.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="sec_git_has_integrity">
				<title>Git Has Integrity</title>

<!-- div attr= class="paragraph"-->
				<p>
					Everything in Git is checksummed before it is stored and is then referred to by that checksum. This means it’s impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. You can’t lose information in transit or get file corruption without Git being able to detect it.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git. A SHA-1 hash looks something like this:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
				<pre>24b9da6552252987aa493b52f8696cd6d3b00373</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
				<p>
					You will see these hash values all over the place in Git because it uses them so much. In fact, Git stores everything in its database not by file name but by the hash value of its contents.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="sec_git_generally_only_adds_data">
				<title>Git Generally Only Adds Data</title>

<!-- div attr= class="paragraph"-->
				<p>
					When you make actions correctly in Git, nearly all of them only <em>add</em> data to the Git database. It is intended to be hard to get Git to do anything that is not undoable or to make it erase data in any way. As with any VCS, you can lose or mess up changes you haven’t committed yet, but after you commit a snapshot into Git, it is more difficult to lose, especially if you regularly push your database to another repository. Having said this, novices can get themselves into a mess. Some advice is to always make sure you are working on a branch <em>other than main or master</em>, and always check to be sure you are on the intended branch before you begin working.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <!--TODO-->Undoing Things.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

<!-- div attr= class="sect3"-->
			</paragraphs>

			<paragraphs xml:id="sec_the_three_states">
				<title>The Three States</title>

<!-- div attr= class="paragraph"-->
				<p>
					Pay attention now — here is the main set of concepts to remember about Git if you want the rest of your learning process to go smoothly. Git has three main states that your files can reside in, <em>modified</em>, <em>staged</em>, and <em>committed</em>:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="ulist"-->
				<p><ul>
					<li>
									<p>
					<term>Modified</term> means that you have changed the file but have not committed it to your database yet.
				</p>
					</li>

					<li>
									<p>
					<term>Staged</term> means that you have marked a modified file in its current version to go into your next commit snapshot.
				</p>
					</li>

					<li>
									<p>
					<term>Committed</term> means that the data is safely stored in your local database.
				</p>
					</li>

				</ul>
				As a metaphor for better understanding these concepts, let's imagine you are shopping for a shirt and some other items online. You find a page with a shirt you are considering, and you make several choices by clicking on things like the style (long-sleeved vs short-sleeved, for example), the size, the color, etc. The state of your browser has been modified from the default state, but you haven't completely decided if you want it, so you have not put it into your shopping cart. That is analogous to <em>modifying</em> your codebase before staging in Git. 
				</p>
				<p>
				Next, maybe you decide that you like these shirt choices enough that you don't want to lose them, so you put the style, size, and color shirt you like into your shopping cart. That is analogous to <em>staging</em> — you have not yet completely committed to buying the shirt, but you are ready to do so, and you are still able to change your mind and make additional changes to your choices or remove the shirt from the shopping cart altogether. You can also keep shopping and postpone making a decision about buying while you continue shopping.
				</p>
				<p>
				Once you have made all of your shopping choices and are ready to commit to paying for the items in your shopping cart, you go through the process of paying. This is analogous to <em>committing</em> — you have made a commitment to receive the items that you paid for, and the online store keeps a record of your purchase. Of course, once you receive the shirt and it isn't quite what you had hoped for, you can still return the shirt, but it is more complicated to do so than before you made the purchase and a record will be made of the return as well. This is also analogous to how Git works. 
				
				</p><!--</div attr= class="ulist">-->
			</paragraphs>
			<paragraphs>
				<title>Git Areas</title>

<!-- div attr= class="paragraph"-->
				<p>
					This leads us to the three main subsections of a Git project: the working tree, the staging area, and the Git directory.
				</p><!--</div attr= class="paragraph">-->


				<figure xml:id="git-areas">
					<caption>Working tree, staging area, and Git directory</caption>

				<image source='areas.png'/><!--</div attr= class="content">-->
				</figure>

				<p>
					The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					The Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you <em>clone</em> a repository from another computer.
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
				<p>
					The basic Git workflow goes something like this:
				</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="olist arabic"-->
				<p><ol>
					<li>
									<p>
					You modify files in your working tree.
				</p>
					</li>

					<li>
									<p>
					You selectively stage just those changes you want to be part of your next commit, which adds <em>only</em> those changes to the staging area.
				</p>
					</li>

					<li>
									<p>
					You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your local Git directory (on your computer). Note that in <xref ref="sec_git_github"/>, we will learn how to push your work to a remote copy of the repository.
				</p>
					</li>

				</ol></p><!--</div attr= class="olist arabic">-->

<!-- div attr= class="paragraph"-->
				<p>
					If a particular version of a file is in the Git directory, it’s considered <em>committed</em>. If it has been modified and was added to the staging area, it is <em>staged</em>. And if it was changed since it was checked out but has not been staged, it is <em>modified</em>. In <!--TODO-->Git Basics you’ll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
				</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->


			</paragraphs>

	</subsection>
<subsection xml:id="sec_git_on_the_command_line">
			<title>The Command Line</title>

<!-- div attr= class="paragraph"-->
			<p>
				There are a lot of different ways to use Git. There are the original command-line tools, and there are many graphical user interfaces of varying capabilities. For this chapter, we will be using Git on the command line. For one, the command line is the only place you can run <em>all</em> Git commands — most of the GUIs implement only a partial subset of Git functionality for simplicity. If you know how to run the command-line version, you can probably also figure out how to run the GUI version, while the opposite is not necessarily true. Also, while your choice of graphical client is a matter of personal taste, <em>all</em> users will have the command-line tools installed and available.
			</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="paragraph"-->
			<p>
				So you will need to to know how to open the Terminal in macOS or Linux or the Command Prompt or PowerShell in Windows. If you don’t remember what we’re talking about here, please review <xref ref="sec_dev_shell_terms"/>.
			</p><!--</div attr= class="paragraph">-->

			<!--TODO add directions on how to get to a terminal in all environments-->


	</subsection>

	<subsection xml:id="git_installing">
		<title>Installing Git</title>

<!-- div attr= class="paragraph"-->
		<p>
			Before you start using Git, you have to make it available on your computer. Even if it’s already installed, it’s probably a good idea to update to the latest version. You can either install it as a package or via another installer, or download the source code and compile it yourself. If you are a beginner, we strongly recommend using an installer.
		</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="admonitionblock note"-->
<!-- 			<table>
				<caption></caption>
<col width="50%" />
<col width="50%" />
				<tabular>
				<row class="odd">
					<cell halign="left">
Note
</cell>
					<cell halign="left">
			<p>
				This section was written using Git version <term>2.8.0</term>. Though most of the commands we use should work even in ancient versions of Git, some of them might not or might act slightly differently if you’re using an older version. Since Git is quite excellent at preserving backwards compatibility, any version after 2.8 should work just fine.
			</p>
			</cell>
				</row>
				</tabular>
			</table> -->

<!-- div attr= class="sect3"-->

	<paragraphs xml:id="git_installing_on_linux">
		<title>Installing on Linux</title>

	<!-- div attr= class="paragraph"-->
		<p>
			If you want to install the basic Git tools on Linux via a binary installer, you can generally do so through the package management tool that comes with your distribution. If you’re on Fedora (or any closely-related RPM-based distribution, such as RHEL or CentOS), you can use <c>dnf</c>:
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
		<pre>$ sudo dnf install git-all</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

	<!-- div attr= class="paragraph"-->
		<p>
			If you’re on a Debian-based distribution, such as Ubuntu, try <c>apt</c>:
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
		<pre>$ sudo apt install git-all</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

	<!-- div attr= class="paragraph"-->
		<p>
			For more options, there are instructions for installing on several different Unix distributions on the Git website, at <url href="https://git-scm.com/download/linux" visual="git-scm.com/download/linux">https://git-scm.com/download/linux</url>.
		</p><!--</div attr= class="paragraph">--><!--</div attr= class="sect3">-->

	<!-- div attr= class="sect3"-->
	</paragraphs>

	<paragraphs xml:id="git_installing_on_macos">
		<title>Installing on MacOS</title>

	<!-- div attr= class="paragraph"-->
		<p>
			There are several ways to install Git on a Mac. The easiest is probably to install the Xcode Command Line Tools. On Mavericks (10.9) or above you can do this simply by trying to run <c>git</c> from the Terminal the very first time.
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="listingblock"-->
	<!-- div attr= class="content"-->
		<pre>$ git --version</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

	<!-- div attr= class="paragraph"-->
		<p>
			If you don’t have it installed already, it will prompt you to install it.
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="paragraph"-->
		<p>
			If you want a more up to date version, you can also install it via a binary installer. A macOS Git installer is maintained and available for download at the Git website, at <url href="https://git-scm.com/download/mac" visual="git-scm.com/download/mac">https://git-scm.com/download/mac</url>.
		</p><!--</div attr= class="paragraph">-->


	<!-- div attr= class="sect3"-->
	</paragraphs>

	<paragraphs xml:id="_installing_on_windows">
		<title>Installing on Windows</title>

	<!-- div attr= class="paragraph"-->
		<p>
			There are also a few ways to install Git on Windows. The most official build is available for download on the Git website. Just go to <url href="https://git-scm.com/download/win" visual="git-scm.com/download/win">https://git-scm.com/download/win</url> and the download will start automatically. Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to <url href="https://gitforwindows.org" visual="gitforwindows.org">https://gitforwindows.org</url>.
		</p><!--</div attr= class="paragraph">-->

	<!-- div attr= class="sect3"-->
	</paragraphs>
	</subsection>

<subsection xml:id="_git_help">
<title>Getting Help</title>

<!-- div attr= class="paragraph"-->
<p>
If you ever need help while using Git, there are three equivalent ways to get help for any of the Git commands:
</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
<pre>$ git help &lt;verb&gt;
$ git &lt;verb&gt; --help
$ man git-&lt;verb&gt;</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->

<!-- div attr= class="paragraph"-->
<p>
For example, you can get help for the <c>git config</c> command by running this:
</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
<pre>$ git help config</pre><!--</div attr= class="content">--><!--</div attr= class="listingblock">-->
<!-- div attr= class="paragraph"-->
<p>
If you don’t need the full-blown manpage help, but just need a quick refresher on the available options for a Git command, you can ask for the more concise “help” output with the <c>-h</c> option, as in:
</p><!--</div attr= class="paragraph">-->

<!-- div attr= class="listingblock"-->
<!-- div attr= class="content"-->
<pre>$ git add -h
usage: git add [&lt;options&gt;] [--] &lt;pathspec&gt;...

-n, --dry-run               dry run
-v, --verbose               be verbose

-i, --interactive           interactive picking
-p, --patch                 select hunks interactively
-e, --edit                  edit current diff and apply
-f, --force                 allow adding otherwise ignored files
-u, --update                update tracked files
--renormalize               renormalize EOL of tracked files (implies -u)
-N, --intent-to-add         record only the fact that the path will be added later
-A, --all                   add changes from all tracked and untracked files
--ignore-removal            ignore paths removed in the working tree (same as --no-all)
--refresh                   don't add, only refresh the index
--ignore-errors             just skip files which cannot be added because of errors
--ignore-missing            check if - even missing - files are ignored in dry run
--chmod (+|-)x              override the executable bit of the listed files
--pathspec-from-file &lt;file&gt; read pathspec from file
--pathspec-file-nul         with --pathspec-from-file, pathspec elements are separated with NUL character</pre>

</subsection>

<conclusion>
	<title>Section Summary</title>
	
	<p>
	You should now have a basic understanding of what Git is and how it’s different from other centralized version control systems. You should also now have a working version of Git on your system that’s set up with your personal identity. It’s now time to learn some Git basics.
	</p>
</conclusion>

</section>

