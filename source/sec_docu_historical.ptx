<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_documentation_matters" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Documentation Matters!</title>
  <introduction>
	<p>
		Quality documentation is essential because it is impossible to remember every decision anyone has ever made. Even seasoned developers might write some complicated code, and if they come back to it six months later, even they might not easily remember why a particular change was made or understand how it works without good documentation.
    </p>
	<p>
		In open source, documentation is a key tool. Documentation needs to exist to explain why decisions were made, how to get things running, how the code is organized and works, and what steps must be taken to contribute. You have to document everything that you do in a open source project, not just with the code. Next year when you need to remember why a technical decision was made, the answer should be readily available in the documentation.
	</p>
  </introduction>

  <subsection xml:id="subsec_why_needed">
    <title>Effective Documentation</title>


			<p>
				Part of your journey is learning how to document well. 
			</p>

					<p>
				<url href="https://en.wikipedia.org/wiki/Software_documentation" visual="en.wikipedia.org/wiki/Software_documentation">According to Wikipedia</url>, documentation “is written text that accompanies computer software. It either explains how it operates or how to use it.” For software engineering purposes, operate/use includes manipulating the source code as well as using the application. Documentation is a sanity-preserving tool for users of and potential contributors to your project, including your future self … and perhaps your future boss or coworker.
			</p>

			<p>
				 If you needed to find out who had done a particular commit to the code in version control and why they did it, you would want the project to use tools and processes taught in this book. Any time you want to understand why a page in Wikipedia is edited a certain way, the <em>history</em> and <em>discussion</em> buttons reveal a rich level of information and interaction that are the backbone of what makes it a useful and reliable source:
			</p>

		

			<p>
				From a practical standpoint, here’s a piece of code. What does it do? Take 2 minutes and see how far you can get just by looking at the code snippet alone.
			</p>

			<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

			<p>
				Even if you had written this code yourself six months ago, how likely would you be to remember what it does now?
			</p>

			<p>
				How about this?
			</p>

			<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
"""Returns all items that match the given criteria and appear 
before this Tag in the document.""" 
return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

			<p>
				Now go to this link.
			</p>

			<p>
				<url href="http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)" visual="www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)">http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)</url>
			</p>

			<p>
				Which of those methods gives you the quickest idea of how to use that particular piece of code? If you had to figure out how to use this XML parsing library and make something in the next ten minutes, which level of documentation do you hope the code would have?
			</p>

			

			<p><ul>
				<li>
				<url href="http://en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history" visual="en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history">History of the Wikipedia page on ‘software documentation’</url>
				</li>

				<li>
				<url href="https://en.wikipedia.org/wiki/Talk:Software_documentation" visual="en.wikipedia.org/wiki/Talk:Software_documentation">Discussion or talk page on ‘software documentation’</url>
				</li>

				<li>
				<url href="https://en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history" visual="en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history">History of ‘Talk:Software_documentation’</url>
				</li>

			</ul></p>

		

			<p>
				In open source projects, documentation is a way of life. It is more than developer documentation in code and README files. 
			</p>

		

			





			
       
			<p>
				Every technical effort has requirements for different types of documentation. The project’s ability to make writing, editing, and publishing as easy as possible is the main key to attracting and retaining contributors.
			</p>

			<p>
				According to Mozilla, developer contributions to documentation greatly increased along with a new community of writers, editors, and translators. This all resulted from reducing the barriers to success that made even experienced developers too frustrated to document properly.
			</p>


				<exercise xml:id="exercise-practice-good-code-commenting">
					<title>Exercise: Practice good code commenting</title>

					<p>
						Throughout all the exercises in this book practice doing good commit messages as well as effective commenting and documentation for your coding efforts.
					</p>

					<p><ol>
						<li>
						Write thorough comments in all your source code.
						</li>

						<li>
						Trade sources with another student and attempt to make sense of the source from the documentation alone.
						</li>

					</ol></p>

				</exercise>
	</subsection>



</section>

