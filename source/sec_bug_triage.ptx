<?xml version="1.0" encoding="UTF-8"?>


<section xml:id="sec_bug_triage" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Bug Triage</title>
  

  <introduction>
			<p>
				Some projects receive a handful of bug reports. Some projects receive tens of thousands of bug reports.
			</p>

			<p>
				All projects have overworked developers. In software projects, there are almost always more bugs than time to fix them.
			</p>
      <p>
        Bug triage is needed!
      </p>
  </introduction>

  		<subsection xml:id="triage">
			<title>Bug Triage</title>

			<p>
				The title <em>triage</em> is borrowed from the medical profession, in which patients are stabilized and prioritized based on the severity of their condition. In the same way that patients are prioritized, bugs can be prioritized. Bug triage saves critical time for developers, and moves the project forward. It’s one of the most useful and instructive activities in which a newbie can engage.
			</p>

			<p>
				Some projects have entire teams devoted to bug triage. A couple examples:
			</p>

			<p><ul>
				<li>
				<url href="https://wiki.gnome.org/Bugsquad/TriageGuide">The GNOME Bug Squad</url>
				</li>

				<li>
				<url href="https://wiki.ubuntu.com/Bugs/Triage">Ubuntu Bug triage</url>
				</li>

			</ul></p>

			<p>
				There are many more examples of bug triage teams — but even those projects that don’t have a dedicated team can still benefit greatly from bug triage.
			</p>

			<p>
				Triaging a bug generally means:
			</p>

			<p><ul>
				<li>
				<title>Letting the user know that someone has looked at it</title> This simple courtesy is frequently overlooked. Bug trackers send emails to the original reporter whenever the state of a bug changes in any way — and when a user files a bug and never hears any response at all, it’s discouraging and makes it less likely that the user will bother to file another bug. A response such as, “thanks for reporting, I’ll try to reproduce today” can be very helpful.
				</li>

				<li>
				<title>Looking for other similar bugs</title> A large percentage of bugs filed against open source projects are duplicates; users frequently report bugs without searching to see if similar bugs have already been filed. Finding duplicates becomes easier with a bit of practice; the more familiar you are with a program, and the more you communicate with its developers, and the more bugs you see coming through the bug tracker, the more likely it is that you know when a bug is a duplicate. Still, even an inexperienced triager can spot obvious duplicates.
				</li>

				<li>
				<title>Guaranteeing proper severity and/or priority</title> Users tend to think that their bugs are the most important issues in the world. Sometimes, they’re right. Often, they’re not. Part of the triager’s job is to make a good faith estimate of a bug’s severity and priority. It’s an imperfect process, so triagers are also be wrong sometimes — but experienced bug triagers are much less wrong.
				</li>

				<li>
				<title>Ensuring that the bug is sensible and helpful to developers</title> A poorly written bug report should never even make its way into the developer’s queue. If a bug report is filed with absolutely no information, it’s the triager’s job to get that information — with a politely worded comment in the bug, something like this: “Thanks for filing the bug, but there isn’t much information here. Could you help by telling us what version of Barchat you’re running, and if possible, attach the last 100 lines of ~/.barchatlog?”
				</li>

				<li>
				<title>Ensuring that the bug is filed against the correct component, with the correct version</title> Sometimes, bugs are simply filed with the wrong information in some of the fields and it is obviously wrong. When a bug report about foomail accidentally gets filed against foomatic, reassiging that bug to the right component is simple — but vital.
				</li>

			</ul></p>

			<p>
				<em>Take note! If you can do these things well, you are building job references with real developers, right now.</em> If you are doing it right at this point, you may be setting yourself up for a job down the line.
			</p>


			<exercise xml:id="exercise-bug-triage">
				<title>Exercise: Bug Triage</title>

				<p>
					Find five bug reports in the <em>new</em> state, and attempt to triage them according to the rules above. Your goal is to do as much as you possibly can, in a short period of time, to make those bug reports as useful as possible to the developer to whom they are assigned. (Note: be sure to follow any triage rules that your project may have defined. If there are no set triage rules, be sure to announce your intentions on the project’s mailing list, so that developers can provide you some guidelines if they choose.)
				</p>

			</exercise>


    <exercise>
      <title>Exercise: Find the leading Bug-Zapper</title>
			<p>
				Find the developer to whom the most bugs are assigned. Find all bugs in the <em>new</em> state that have not been reproduced, and try to reproduce them.
				</p>
    </exercise>
      <exercise>
        <title>Exercise: Get bug notifications</title>
        <p>
          Figure out how to get yourself put on the default <em>Cc:</em> of a particular bug or component, so that you see new bug reports in your email.
        </p>
        
      </exercise>

		</subsection>


</section>


