<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="git-why-version-control" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Why Version Control?</title>
  <introduction>
    <p>
      Have you ever experienced something like this the following scenario?
      <ul>
        <li>
          You create an important document.
        </li>
        <li>
          Because it’s important you email it to some friends or family or colleagues for feedback on it.
        </li>
        <li>
          You re-read it yourself create a new edited version.
        </li>
        <li>
          Then you get back feedback from someone you sent it to, but the feedback is on your original version.
        </li>
        <li>
          You then have to merge the two versions <em>by hand</em>.
        </li>
      </ul>
    </p>
    <p>
    After doing a lot of merging of documents by hand, you might have a folder that looks like the following:
  </p>
    <pre>
      mydoc.odt
      mydoc2.odt
      mydoc-moms-edits.odt
      mydoc2-plus-moms-combined.odt
    </pre>
    <p>
      Or maybe you have experienced this on a larger scale... For example, three of your friends comment on different versions, and then they each share their edits with the whole group via email. Some comment on the original version, some comment on your mom's version, others comment on your brother's version, etc.
    </p>
    <p>
      If you have experienced this, you have used version control, which according to Wikipedia <url href="https://en.wikipedia.org/wiki/Version_control" visual="https://en.wikipedia.org/wiki/Version_control">version control</url> “is the management of changes to documents, programs, and other information stored as computer files.” But, if you have experienced anything like this, then you have also have come to deeply understand the need for a better and easier way to merge in any changes that come on an earlier version. Formal software systems that are designed for version control have many advantages over the kind of informal system that we just described.
    </p>

    <p>
      <idx>version control system (VCS)</idx>
      A <term>version control system (VCS)</term> is a system that stores all of the versions of a project along with comments on those version that explain the reasons for the changes. 
      A system that manages version control for software development is sometimes called a <em>source code management (SCM)</em> system, but we will typically use the more general term. In this chapter, you will learn the basics of version control.
    </p>

  </introduction>

  <subsection xml:id="subsec_vcs_intro">
    <title>Version Control Systems</title>

     	<p>
				The OSS world has developed many excellent ways of managing a software project, including not only a history of changes, but also who did what when and why.
			</p>

			<p>
				You may want to start your own project someday, and you will have to choose an VCS. When you work with existing projects, the VCS has been chosen for you. The following five VCSs have been popular over the past few decades:
			</p>

			<p><ul>
				<li>
				<url href="http://subversion.apache.org" visual="subversion.apache.org">Subversion (svn)</url>
				</li>

				<li>
				<url href="http://bazaar.canonical.com/en/" visual="bazaar.canonical.com/en">Bazaar (bzr)</url>
				</li>

				<li>
				<url href="http://www.nongnu.org/cvs/" visual="www.nongnu.org/cvs">Concurrent Version System (cvs)</url>
				</li>

				<li>
				<url href="https://git-scm.com" visual="git-scm.com">Git (git)</url>
				</li>

				<li>
				<url href="https://www.mercurial-scm.org/" visual="www.mercurial-scm.org/">Mercurial (hg)</url>
				</li>

			</ul></p>


  </subsection>

    <conclusion>
    <p>
      What has happened in the recent decade in version control systems has been truly remarkable because Git has come to completely dominate not just the open source world, but also much of the rest of the proprietary software community as well.
    </p>

    </conclusion>

</section>

