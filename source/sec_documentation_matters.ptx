<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_documentation_matters" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Documentation Matters</title>
  <introduction>
			<p>
				People might tell you documentation doesn’t matter. In a perfect world, it might not. If all code were self-evident and all programs worked for users without needing help, if all work and communities were easy to participate in, perhaps we could do without documentation. Of course, that would require all people to think and act in similar ways; we may never be without documentation simply because we are a diverse species.
    </p>
  </introduction>
  <subsection xml:id="subsec_why_needed">
    <title>Why Documentation is Needed</title>
			<p>
				In open source, documentation is a key tool of transparency and participation. You have to document everything that you do in a open source project, not just with the code. Next year when you need to remember why a technical decision was made, the answer is coming from a combination of mailing list archives, wiki page history, and well written version control log messages. A question of why you have specific commit rules or code styles? Mailing list archive and wiki page history are your friends.
			</p>

			<p>
				There are two main ends in the spectrum of documentation:
			</p>

			<p><ol>
				<li>
				Content written ad hoc and in the flow of working; it captures the moment; examples are comments in source code, commit log messages, and notes taken during a meeting.
				</li>

				<li>
				Content planned as a document of some size; it captures a version in time; it follows a more rigorous process with a higher quality result.
				</li>

			</ol></p>

			<p>
				Part of your journey is learning when to practice each end of the spectrum. Properly done, the ad hoc just-in-time components add up to coherent whole that approaches a full document, but it usually requires a restructuring and culling of content to make it gain the higher quality.
			</p>

			<p>
				From a practical standpoint, here’s a piece of code. What does it do? Take 2 minutes and see how far you can get just by looking at the code snippet alone.
			</p>

			<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

			<p>
				Even if you had written this code yourself six months ago, how likely would you be to remember what it does now?
			</p>

			<p>
				How about this?
			</p>

			<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
"""Returns all items that match the given criteria and appear 
before this Tag in the document.""" 
return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

			<p>
				Now go to this link.
			</p>

			<p>
				<url href="http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)" visual="www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)">http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)</url>
			</p>

			<p>
				Which of those methods gives you the quickest idea of how to use that particular piece of code? If you had to figure out how to use this XML parsing library and make something in the next ten minutes, which level of documentation do you hope the code would have?
			</p>

			<p>
				Apply the same thinking to the processes and proceedings of a open source community. If you had to find out in the next ten minutes who had done a particular commit to the code in version control and why they did it, you would want the project to use tools and processes taught in this book. Any time you want to understand why a page in Wikipedia is edited a certain way, the <em>history</em> and <em>discussion</em> buttons reveal a rich level of information and interaction that are the backbone of what makes it a useful and reliable source:
			</p>

			<p><ul>
				<li>
				<url href="http://en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history" visual="en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history">History of the Wikipedia page on ‘software documentation’</url>
				</li>

				<li>
				<url href="https://en.wikipedia.org/wiki/Talk:Software_documentation" visual="en.wikipedia.org/wiki/Talk:Software_documentation">Discussion or talk page on ‘software documentation’</url>
				</li>

				<li>
				<url href="https://en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history" visual="en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history">History of ‘Talk:Software_documentation’</url>
				</li>

			</ul></p>

			<p>
				<url href="https://en.wikipedia.org/wiki/Software_documentation" visual="en.wikipedia.org/wiki/Software_documentation">According to Wikipedia</url>, documentation “is written text that accompanies computer software. It either explains how it operates or how to use it.” For software engineering purposes, operate/use includes manipulating the source code as well as using the application. Documentation is a sanity-preserving tool for users of and potential contributors to your project, including your future self … and perhaps your future boss or coworker.
			</p>

			<p>
				In open source projects, documentation is a way of life. It is more than developer documentation in code and README files. Practicing the kind of radical transparency that makes open source successful means all of these things and more:
			</p>

			<p><ul>
				<li>
				If your code is poorly commented and opaque, people know and tell you;
				</li>

				<li>
        <p>
				When ideas that become decisions are documented throughout the entire discussion, everyone can see and understand the logic; these ideas are:

		<ul>
				<li>
				Better accepted;
				</li>

				<li>
				Better liked; and
				</li>

				<li>
				Grow more innovations downline;
				</li>

			</ul></p>
				</li>

				<li>
				You can share the burden of documentation with fellow developers, making lighter work for all;
				</li>

				<li>
        <p>
				The extra effort of documenting meetings and proceedings pays off many, many times over when:

		    <ul>
				<li>
				You can’t be there and still want to participate/know;
				</li>

				<li>
				A decision needs to be explained and reviewed;
				</li>

				<li>
				A mistake is discovered, needs fixing, and to be learned from;
				</li>

				<li>
				New people come to the community and can self-learn to a very deep and rich understanding;
				</li>

				<li>
				… and so on.
				</li>

			</ul></p>
				</li>

			</ul></p>

			<p>
				There is also content written to document an event, such as notes for a class or technical conference, or minutes from the proceedings of a meeting. In open source projects, similar tools and processes are used in this type of documenting. Keeping transparent proceedings of meetings and similar events is a useful skill for open source developers.
			</p>

			<p>
				Kat Walsh: “Not just encourage other people to discover and use it themselves, but make them want to share it with other people and go ‘hey, look how good this is.'”
			</p>

			<p>
				Every technical effort has a requirement for documentation. The project’s ability to make writing, editing, and publishing as easy as possible is the main key to attracting and retaining contributors.
			</p>

			<p>
				According to Mozilla, developer contributions to documentation greatly increased along with a new community of writers, editors, and translators. This all resulted from reducing the barriers to success that made even experienced developers too frustrated to document properly.
			</p>




				<exercise xml:id="exercise-practice-good-code-commenting">
					<title>Exercise: Practice good code commenting</title>

					<p>
						Throughout all the exercises in this book practice doing good commenting and documentation for your coding efforts.
					</p>

					<p><ol>
						<li>
						Write thorough comments in all your source code.
						</li>

						<li>
						Trade sources with another student and attempt to make sense of the source from the documentation alone.
						</li>

						<li>
						Write at least one wiki page of developer documentation for each program you write or work on: Share this burden with other students working on the same code base. Contribute this to any open source projects you work on.
						</li>

					</ol></p>

				</exercise>
	</subsection>

  <subsection xml:id="common-tools-and-processes-for-open-source-documentation">
			<title>Common tools and processes for open source documentation</title>

			<p>
				Documentation requires tools that are very similar to those used in coding.
			</p>

			<p><ul>
				<li>
				Editor to write content in.
				</li>

				<li>
				Means to collaborate with other writers and technical contributors.
				</li>

				<li>
				Version control.
				</li>

				<li>
				Means to markup, build, and publish draft and finished documents.
				</li>

				<li>
				Processes to use these tools as part of a collaboration.
				</li>

			</ul></p>

			<p>
				Typical thinking about documentation focuses on certain parts of the tools, such as the editor (Emacs, Vi, etc.) or the markup-build-publish tools (XHTML, TeX, Docbook, etc.). A content management system (CMS) such as Drupal or WordPress has all of the requirements built in one tool. The structure of the tooling enforces a loose, strict, or customizable process.
			</p>

			<p>
				For example, WordPress is a CMS that is focused on one or a group of writers producing content that appears in news fashion on a website. The tools loosely enforce a process of editing drafts, previewing, categorizing and tagging, organizing by date etc., and scheduling or pushing to publish.
			</p>


				<paragraphs xml:id="five-steps-for-technical-writing">
					<title>Five steps for technical writing</title>

					<p>
						(Adapted from <url href="https://fossdocs.wordpress.com/2009/08/07/creating-technical-documentation-in-five-easy-steps/" visual="fossdocs.wordpress.com/2009/08/07/creating-technical-documentation-in-five-easy-steps/">Creating technical documentation in five easy steps</url> and <url href="https://fossdocs.wordpress.com/2009/10/20/magic-waterfalls/" visual="https://fossdocs.wordpress.com/2009/10/20/magic-waterfalls/">Magic waterfalls</url> under <url href="https://creativecommons.org/licenses/by-sa/3.0/" visual="creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-Share Alike 3.0.</url>)
					</p>

					<p>
						Technical writing is more of a scientific process than an artistic one, which is good news. You can learn how to do it with a little practice, and there are methods you can follow. The method in this book is one that is common to good software projects, whether open source or not. It is a waterfall method and applies from large to small efforts, sets of books down to a five paragraph section on a wiki.:
					</p>

					<p><ol>
						<li>
						Planning – Who is the audience? What are the goals?
						</li>

						<li>
						Content – What is the work about? Where will you get the information?
						</li>

						<li>
						Writing – First draft, review, second draft ...
						</li>

						<li>
						Internationalisation/Internationalization – What spelling conventions will be used? Will the work be translated? If so, into what languages?
						</li>

						<li>
						Review – What worked? What didn’t? How will the work be maintained?
						</li>

					</ol></p>

					<p>
						It’s called a waterfall model because if you start at the top, the results of the first step are used to move into the second step, just like water flowing down a series of steps into a pool.
					</p>


					<p>
						Anyone with a scientific or engineering mind can create technical documentation, they might not enjoy it, but they are more than capable of creating it.
					</p>

				</paragraphs>
    </subsection>

</section>

