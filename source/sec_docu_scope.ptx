<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_docu_scope" xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Documentation Matters!</title>
	<introduction>
		<p>
			Quality documentation is essential to open source communities because decisions and processes need to be communicated to a distributed team of developers as well as to future developers. In addition, even seasoned developers might write some complicated code, and if they come back to it six months later, even they might not easily remember why a particular change was made or understand precisely how it works without good documentation. But, these are just two of the many reasons documentation matters in open source.
		</p>
		<p>
				Any time you want to understand why a page in Wikipedia is edited a certain way, the <em>history</em> and <em>discussion</em> buttons reveal a rich level of information and interaction that are the backbone of what makes it a useful and reliable source. Look at each of the following links that serve to document changes to the Wikipedia page on software documentation:
			
			<ul>
				<li>
					<url
						href="http://en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history"
						visual="en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history">History
						of the Wikipedia page on ‘software documentation’</url>
				</li>

				<li>
					<url href="https://en.wikipedia.org/wiki/Talk:Software_documentation"
						visual="en.wikipedia.org/wiki/Talk:Software_documentation">Discussion
						or talk page on ‘software documentation’</url>
				</li>

				<li>
					<url
						href="https://en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history"
						visual="en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history">History
						of ‘Talk:Software_documentation’</url>
				</li>

			</ul>
		</p>

		<p>
			In open source projects, documentation is essential. It is much more than developer
			documentation in code and README files.
		</p>

		<p>
			Every technical effort has requirements for different types of documentation. The
			project’s ability to make writing, editing, and publishing as easy as possible is the
			main key to attracting and retaining contributors.
		</p>

		<p>
			According to Mozilla, developer contributions to documentation greatly increased along
			with a new community of writers, editors, and translators. This all resulted from
			reducing the barriers to success that made even experienced developers too frustrated to
			document properly.
		</p>

		<p>
			In open source communities documentation is a key tool. Documentation needs to exist to explain why decisions were made, how to get things running, how the code is organized and works, and what steps must be taken to contribute. You have to document everything that you do in a open source project, and this is not just with the code. Next year when you need to
			remember why a technical decision was made, the answer should be readily available in the documentation.
		</p>
	</introduction>

	<subsection xml:id="subsec-docu_purpose">
		<title>The Purpose of Documentation</title>
		<idx>documentation</idx>
		<p>
			What do you think of when you think of documentation in OSS? Do you think of the README
			or LICENSE or CODE_OF_CONDUCT or other files often found in the root of the main code
			repository? Do you think of source code documentation? Do you think of documentation
			made by documentation generators such as Doxygen, Javadoc, NDoc, or others? Do you think of tutorials
			or user manuals? Do you think of the list of open merge requests and related discussions for a project? Do you think of release notes or other documentation accompanying
			specific versions of the software? If you think of these, then you are on the right
			track, but documentation in a typical OSS project often includes even more.
		</p>

		<p>
			Because many projects have widely distributed, volunteer developers and other
			contributors, documentation is key to keeping the project on course. Note that the
			specific documentation included in a project repository can vary widely depending on the
			project and its goals.
		</p>

		<p>In addition to source code, each OSS project typically contains a set of specifically named documentation files. The following are often included: 
		<ul>
				<li>
					<title>README</title>
					<p>
						Arguably the most important file in any open source project, the README file typically contains an overview of the project, instructions on how to get started, information on how to contribute, and many other pieces of information that are
						important to that particular OSS project.
					</p>
				</li>

				<li>
					<title> CHANGELOG</title>
					<p>
						<idx>CHANGELOG</idx>
						Documenting changes to the project over time, the CHANGELOG usually includes a list of all releases and a summary of the changes that were made in each one.
					</p>
				</li>
				<li>
					<title>CODE_OF_CONDUCT</title>
					<p>
						Outlining the behavior expected of all contributors and users of the project, the CODE_OF_CONDUCT is intended to ensure that the project is welcoming and respectful to all. If you are interested in getting involved in an OSS project, be sure to read
						this file not only so you know how you should behave, but also so you know how you can expect to be treated.
					</p>
				</li>
				<li>
					<title>CONTRIBUTING</title>
					<p>
						If you are at all interested in getting involved in a new OSS project, the CONTRIBUTING file is key because it provides guidelines for contributors, including
						how to report bugs, how to submit proposed code changes, and how to get help.
					</p>
				</li>
				<li>
					<title>FAQ</title>

					<p>
						<idx>FAQ</idx>
						As is typical outside of OSS, FAQ provides answers to frequently asked questions about the project.
					</p>
				</li>

				<li>
					<title>INSTALL</title>
					<p>
						Containing instructions on how to install and set up the project, note that the INSTALL files is often not the same as how to set up the development environment to contribute to the project.
					</p>
				</li>
				<li>
					<title>LICENSE</title>

					<p> As explained in <xref ref="ch_licensing" />, the LICENSE file specifies the terms under which the project is licensed. It outlines what others are and are not allowed to do with the code. </p>
				</li>
				<li>
					<title>TUTORIALS</title>
					<p>
						The TUTORIALS file contains or links to tutorials or guides that help users understand how to use the project.
					</p>
				</li>
				<li>
					<title>ROADMAP</title>
					<p>
						Outlining the project's plans for future releases, the ROADMAP is useful to new contributors to understand the direction of the project. 
					</p>
				</li>

			</ul>

		</p>
		<p> Some types of documentation utilize a particular structure often provided by the repository platform. We have discussed some of these earlier. Some very common kinds of documentation of this type are: <ul>
			<li>
				<title>Automation of Builds and Publishing</title>
				<p>
					While not used in all projects, larger OSS projects typically use CI/CD (continuous integration, delivery, and deployment) tools and processes in order to provide ongoing automation and continuous monitoring throughout the software lifecycle, from integration and testing phases to delivery and deployment. 
				</p>
			</li>

			<li>
				<title>Bug and/or Issue Tracking</title>
				<p> Bug and/or issue trackers provide tracking information for bugs or issues
			that have been identified in the project. They typically include related reports with
			steps to reproduce the issue or bug, the expected behavior, and the actual behavior.
			More about bug and issue trackers is covered in <xref ref="sec_issues_bugs" />. </p>
				</li>
				<li>
					<title>Editing and Review</title>
					<p> As we learned in <xref ref="sec_git_github" />,  Software Engineering Collaboration Platforms like Github provide a forum for code reviews, proposed edits, proposed updates, and discussions of these via merge or pull requests. These are also a dedicated forum for discussing a proposed feature or bug fix. </p>
				</li>
				<li>
					<title>Project Management</title>
					<p>
						Certain project management tools, such as Kanban boards, GitHub Projects, Trello Boards, etc. are often be used to
			organize and track the progress of documentation-related tasks and issues. These tools
			typically provide a visual and flexible way to manage the workflow of creating,
						updating, and maintaining documentation within a OSS repository.
					</p>
				</li>

							<li>
				<title>Version control</title>
				
				<p>
					Version control is documented through git or another VCS. See <xref ref="ch_git"/> for more detail.
				</p>
			</li>
			</ul>


		</p>


		<p> Depending on the project, many other types of documentation might be found the project repository
			including documentation that is not easily contained in a single file or a single tool.
			This type of documentation includes: <ul>
				<li>
					<title>Design documents</title>
					<p>
						Design documents provide detailed information on the design and architecture
			of the project. They often include diagrams, flowcharts, and other visual aids to help
			developers understand the project's structure.
					</p>
				</li>
				<li>
					<title>Developer documentation</title>
					<p>
						Developer documentation provides information that is useful to developers
			working on the project. They often include coding conventions, APIs, and other technical information.
					</p>
				</li>
				<li>
					<title>Feature specifications</title>

					<p>
						Similar in purpose to a ROADMAP file, feature specification documents provide detailed descriptions of the
						features that the project is expecting to implement. They often include use cases,
						functional requirements, and technical specifications.
					</p>
				</li>
				<li>
					<title>Help documents</title>

					<p>
						Help documents provide information on how to get help if you are having problems with the project. They often include contact information for the project's support team, as well as troubleshooting tips and frequently asked questions.
					</p>
				</li>
				<li>
					<title>Release notes</title>
					<p>
						Release notes provide information on the changes made in a particular
						release of the project. They often include a list of bug fixes, new features, and other
						changes.
					</p>
				</li>

				<li>
					<title>Test plans</title>

					<p>
						 Describing the test cases that are used to test the project's functionality, test plans often include test scenarios, expected results, and test data.
					</p>
				</li>
				<li>
					<title>User manuals</title>
					<p>
						Providing instructions on how to use the project, user manuals  often include step-by-step instructions, screenshots, and troubleshooting tips.
					</p>
				</li>
			</ul>


		</p>
	</subsection>

	<subsection xml:id="subsec_why_needed">
		<title>Effective Documentation</title>


		<p>
			Part of your journey is learning how to navigate the project's documentation to understand such things as how to get your development environment set-up, how to conduct yourself, as well as how you to contribute if you are so inclined. If you do want to contribute, you will be contributing not only to code, but to the historical documentation of that commit.
		</p>

		<p>
			Documentation is
			a sanity-preserving tool for users of and potential contributors to your project,
			including your future self and perhaps your future boss or coworker. </p>

		<p> If you needed to find out who had made a particular commit to the code in version
			control and why they did it, you would want the project to use tools and processes with effective documentation.
		</p>


		<exercise>
		<title>Exercise: Navigating poorly documented code</title>
		
		<p>
			Consider the following function for two minutes to 
			see how far you can get just by looking at the code snippet alone.
		</p>

		<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
    return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

		<p> Was two minutes sufficient to understand it?
			Even if you had written this code yourself six months ago, how likely would you be to remember what it does now? Briefly explain.
		</p>

		<p>
			Now consider the prototype with a docstring.
		</p>

		<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
"""Returns all items that match the given criteria and appear 
before this Tag in the document.""" 
    return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>


		<p>
			Now go to the following link: 
			<url
				href="http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)"
				visual="www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)">
				Documentation Example</url> and consider it.
		</p>

		<p>
			Which of the above methods gives you the quickest idea of how to use this particular function? If you had to figure out how to use this function from an XML parsing library, which level of documentation do you hope the code would have? Explain.
		</p>

		</exercise>

		<exercise xml:id="exercise-practice-good-code-commenting">
			<title>Exercise: Practice good code commenting</title>

			<p>
				Throughout all the exercises in this book practice doing good commit messages as
				well as effective commenting and documentation for your coding efforts.
			</p>

			<p>
				<ol>
					<li>
						Write thorough comments in all your source code.
					</li>

					<li>
						Trade sources with another student and attempt to make sense of the source
						from the documentation alone.
					</li>

				</ol>
			</p>
		</exercise>
	</subsection>


</section>

