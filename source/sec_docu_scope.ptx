<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_docu_scope" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Documentation Matters!</title>
  <introduction>
	<p>
		Quality documentation is essential because it is impossible to remember every decision anyone has ever made. Even seasoned developers might write some complicated code, and if they come back to it six months later, even they might not easily remember why a particular change was made or understand how it works without good documentation.
    </p>
	<p>
		In open source, documentation is a key tool. Documentation needs to exist to explain why decisions were made, how to get things running, how the code is organized and works, and what steps must be taken to contribute. You have to document everything that you do in a open source project, not just with the code. Next year when you need to remember why a technical decision was made, the answer should be readily available in the documentation.
	</p>
  </introduction>

  <subsection xml:id="subsec-docu_purpose">
	<title>The Purpose of Documentation</title>
	<p>
		What do you think of when you think of documentation in OSS. Do you think of the README or LICENSE or CODE_OF_CONDUCT or other typical files often found in the root of the main code repository? Do you think of docstrings or other comments in the codebase itself? Do you think of user manuals? Do you think of release notes or other documentation accompanying specific versions of the software? If you do, then you are on the right track, but documentation in a typical OSS project often includes much more.
		</p>

		<p>
			Because many projects have widely distributed, volunteer developers and other contributors, documentation is key to keeping the project on course. Note that the specific documentation included in a project repository can vary widely depending on the project and its goals. Some projects may include more documentation than others. Many may not include all of the documentation types listed here.
		</p>

		<p>
			Some of the documentation in some OSS projects consists of specific files that you might find in an open source project repository. These include:
			<ul>
				<li>
					<title>README</title>
					
					<p>
						The README is unarguably the most important file in any open source project. It typically contains an overview of the project, instructions on how to get started, and information on how to contribute.
					</p>
				</li>

				<li>
					<title> CHANGELOG</title>
					<p>
					The CHANGELOG file documents changes to the project over time. It usually includes a list of all releases and a summary of the changes that were made in each one.
	
					</p>
				</li>
				<li>
					<title>CODE_OF_CONDUCT</title>
					<p>
						The CODE_OF_CONDUCT file outlines the behavior expected of all contributors and users of the project. It is intended to ensure that the project is welcoming and respectful to all. If you are interested in getting involved in an OSS project, be sure to read this file not only so you know how you should behave, but also so you know how you can expect to be treated.
					</p>
				</li>
				<li>
					<title>CONTRIBUTING</title>
					<p>
						The CONTRIBUTING file is important to look for if interested in getting involved in a new project because it provides guidelines for contributors, including how to submit code changes, how to report bugs, and how to get help.
					</p>
				</li>
				<li>
					<title>FAQ</title>
					
					<p>
						Th FAQ file when it exists provides answers to frequently asked questions about the project.
					</p>
				</li>
				
				<li>
					<title>INSTALL</title>
					<p>
						When it exists, the INSTALL file contains instructions on how to install and set up the project. Note that this is often not the same as how to set up the development environment to contribute to the project.
					</p>
				</li>
								<li>
					<title>LICENSE</title>
					
					<p>
						As explained in <xref ref="ch_licensing"/> the LICENSE file specifies the terms under which the project is licensed. It outlines what others are and are not allowed to do with the code.
					</p>
				</li>
				<li>
					<title>TUTORIALS</title>
					<p>
						When it exists, the TUTORIALS file contains or links to tutorials or guides that help users understand how to use the project.
					</p>
				</li>
				<li>
					<title>ROADMAP</title>
					<p>
						When it exists, the ROADMAP file outlines the project's plans for future releases.
					</p>
				</li>

			</ul>

		</p>
		<p>
			Some types of documentation requires a particular structure to be effective. Two common kinds of documentation of this type are:
	<ul>
		<li>
			<title>Bug and/or Issue Trackers</title>
			<p>
				Bug and/or issue trackers provide tracking information on bugs or issues that have been identified in the project. They typically include related reports with steps to reproduce the issue or bug, the expected behavior, and the actual behavior. More aboutbug and issue trackers is covered in <xref ref="sec_issues_bugs"/>.
			</p>
		</li>
		<li>
			<title>Merge requests (aka pull requests)</title>
			<p>
				As we learned in <xref ref="sec_git_github"/>, merge requests, aka pull requests, are a mechanism for a developer is a request for a review the code. They are also a dedicated forum for discussing the proposed feature or bug fix. 
			</p>
		</li>
		<li>
			<title>Project Management Tools</title>
					
			<p>
				Certain project management tools, such as GitHub Projects, can be used to organize and track the progress of documentation-related tasks and issues. These tools typically provide a visual and flexible way to manage the workflow of creating, updating, and maintaining documentation within a OSS repository.
			</p>
		</li>
	</ul>


		</p>

		
		<p>
		Many other types of documentation might be found in an open source project repository include documentation that is not easily contained in a single file or a single tool. This type of documentation includes:

		<ul>
			<li>
				<title>Design documents</title>
				<p>
					Design documents provide detailed information on the design and architecture of the project. They often include diagrams, flowcharts, and other visual aids to help developers understand the project's structure.
				</p>
			</li>
			<li>
				<title>Developer documentation</title>
				<p>
					Developer documentation provides information that is useful to developers working on the project. They often include coding conventions, APIs, and other technical information.
				</p>
			</li>
			<li>
				<title>Feature specifications</title>
				
				<p>
					Feature specification documents provide detailed descriptions of the features that the project is expecting to implement. They often include use cases, functional requirements, and technical specifications.
				</p>
			</li>
						<li>
				<title>Help documents</title>
			
				<p>
					Help documents provide information on how to get help if you are having problems with the project. They often include contact information for the project's support team, as well as troubleshooting tips and frequently asked questions.
				</p>
			</li>
			<li>
				<title>Release notes</title>
				<p>
					Release notes provide information on the changes made in a particular release of the project. They often include a list of bug fixes, new features, and other changes.
				</p>
			</li>

			<li>
				<title>Test plans</title>
		
				<p>
					Test plans describe the test cases that are used to test the project's functionality. They often include test scenarios, expected results, and test data.
				</p>
			</li>
			<li>
				<title>User manuals</title>
				<p>
					User manuals  provide instructions on how to use the project. They often include step-by-step instructions, screenshots, and troubleshooting tips.
				</p>
			</li>
		</ul>













	</p>
  </subsection>

  <subsection xml:id="subsec_why_needed">
    <title>Effective Documentation</title>



			<p>
				Part of your journey is learning how to document well. 
			</p>

					<p>
				<url href="https://en.wikipedia.org/wiki/Software_documentation" visual="en.wikipedia.org/wiki/Software_documentation">According to Wikipedia</url>, documentation “is written text that accompanies computer software. It either explains how it operates or how to use it.” For software engineering purposes, operate/use includes manipulating the source code as well as using the application. Documentation is a sanity-preserving tool for users of and potential contributors to your project, including your future self … and perhaps your future boss or coworker.
			</p>

			<p>
				 If you needed to find out who had done a particular commit to the code in version control and why they did it, you would want the project to use tools and processes taught in this book. Any time you want to understand why a page in Wikipedia is edited a certain way, the <em>history</em> and <em>discussion</em> buttons reveal a rich level of information and interaction that are the backbone of what makes it a useful and reliable source:
			</p>

		

			<p>
				From a practical standpoint, here’s a piece of code. What does it do? Take 2 minutes and see how far you can get just by looking at the code snippet alone.
			</p>

			<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

			<p>
				Even if you had written this code yourself six months ago, how likely would you be to remember what it does now?
			</p>

			<p>
				How about this?
			</p>

			<pre>def findAllPrevious(self, name=None, attrs={}, text=None, limit=None, 
**kwargs): 
"""Returns all items that match the given criteria and appear 
before this Tag in the document.""" 
return self._findAll(name, attrs, text, limit, self.previousGenerator, 
**kwargs)</pre>

			<p>
				Now go to this link.
			</p>

			<p>
				<url href="http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)" visual="www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)">http://www.crummy.com/software/BeautifulSoup/documentation.html#findAllPrevious(name,%20attrs,%20text,%20limit,%20**kwargs)%20and%20findPrevious(name,%20attrs,%20text,%20**kwargs)</url>
			</p>

			<p>
				Which of those methods gives you the quickest idea of how to use that particular piece of code? If you had to figure out how to use this XML parsing library and make something in the next ten minutes, which level of documentation do you hope the code would have?
			</p>

			

			<p><ul>
				<li>
				<url href="http://en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history" visual="en.wikipedia.org/w/index.php?title=Software_documentation&amp;limit=500&amp;action=history">History of the Wikipedia page on ‘software documentation’</url>
				</li>

				<li>
				<url href="https://en.wikipedia.org/wiki/Talk:Software_documentation" visual="en.wikipedia.org/wiki/Talk:Software_documentation">Discussion or talk page on ‘software documentation’</url>
				</li>

				<li>
				<url href="https://en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history" visual="en.wikipedia.org/w/index.php?title=Talk:Software_documentation&amp;action=history">History of ‘Talk:Software_documentation’</url>
				</li>

			</ul></p>

		

			<p>
				In open source projects, documentation is a way of life. It is more than developer documentation in code and README files. 
			</p>

		

			





			
       
			<p>
				Every technical effort has requirements for different types of documentation. The project’s ability to make writing, editing, and publishing as easy as possible is the main key to attracting and retaining contributors.
			</p>

			<p>
				According to Mozilla, developer contributions to documentation greatly increased along with a new community of writers, editors, and translators. This all resulted from reducing the barriers to success that made even experienced developers too frustrated to document properly.
			</p>


				<exercise xml:id="exercise-practice-good-code-commenting">
					<title>Exercise: Practice good code commenting</title>

					<p>
						Throughout all the exercises in this book practice doing good commit messages as well as effective commenting and documentation for your coding efforts.
					</p>

					<p><ol>
						<li>
						Write thorough comments in all your source code.
						</li>

						<li>
						Trade sources with another student and attempt to make sense of the source from the documentation alone.
						</li>

					</ol></p>

				</exercise>
	</subsection>



</section>

